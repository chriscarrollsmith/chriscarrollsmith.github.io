<svg width="821.66pt" height="1154.3pt" preserveAspectRatio="xMidYMid" version="1.0" viewBox="0 0 821.66 1154.3" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs>
  <linearGradient id="linearGradient32" x1="407.38" x2="411.39" y1="936.06" y2="645.69" gradientTransform="translate(.08241 -10.5)" gradientUnits="userSpaceOnUse">
   <stop stop-color="#e6aa0a" offset="0"/>
   <stop stop-color="#e6aa0a" stop-opacity="0" offset="1"/>
  </linearGradient>
  <linearGradient id="linearGradient34" x1="407.38" x2="411.39" y1="936.06" y2="645.69" gradientTransform="translate(.08241 -10.5)" gradientUnits="userSpaceOnUse">
   <stop stop-color="#fbde00" offset="0"/>
   <stop stop-color="#c79d00" offset="1"/>
  </linearGradient>
  <radialGradient id="radialGradient4" cx="411.24" cy="389.67" r="406" gradientTransform="matrix(1.0057 0 0 .95978 -1.6895 15.673)" gradientUnits="userSpaceOnUse">
   <stop stop-color="#7c6d00" offset="0"/>
   <stop stop-color="#fbde00" offset="1"/>
  </radialGradient>
 </defs>
 <path d="m225.72 644.26c-81.663 140.51-118.41 199.3-225.64 383.33 40.719 4.0111 111.34 10.708 139.18 13.389 16.155 26.358 93.65 112.69 94.153 113.19 86.271-181.59 164.23-323.78 178.6-352.9 66.83 129.11 98.83 189.73 169.2 348.9 1.1545 2.0781 76.825-92.407 97.089-118.19 30.614-8.9821 97.352-15.751 143.27-24.273-13.245-19.052-216.97-339.06-233.45-374.02" fill="url(#linearGradient34)" stroke="url(#linearGradient32)" stroke-width=".1"/>
 <path d="m655.34 678.26c4.9468 2.9502 24.059 20.27 27.906 16.858 3.2287-3.284 59.962-73.89 59.962-74.656 0-0.6568-13.261-10.837-17.527-13.464 2.4797-7.979 8.447-15.418 13.03-22.55 9.4449 2.398 18.295 8.0133 28.021 9.4141 12.029-29.507 25.967-60.613 37.477-90.31-5.6701-6.5823-16.307-7.5971-24.446-10.837 3.1047-11.366 5.2032-22.934 7.38-34.482 11.032-0.22061 22.063-0.43863 33.095-0.6568-3.2457-66.905 0.42201-71.551-2.3063-99.177-9.0304 0.33299-18.064 0.54637-27.098 0.76627-2.2865-11.424-3.8353-22.988-6.3422-34.373-0.58339-1.9384 32.051-13.816 31.711-15.106-0.46124-1.8609-41.974-92.281-42.32-92.281-0.39097 0-27.27 10.947-29.174 10.947-7.3452-8.5064-12.66-18.465-19.027-27.695l27.329-25.944c-24.108-22.725-48.085-45.575-72.07-68.417-8.0482 6.6854-14.542 15.297-23.178 21.346-0.68047 0-8.1217-5.4858-19.372-13.793 5.1687-11.19 13.832-21.168 18.104-32.731-1.2684-0.9852-90.405-47.071-91.097-47.071-1.3144 0-15.831 27.116-18.104 29.994-2.1154 2.6776-31.201-8.0295-31.019-9.4142 1.0378-7.2248 4.0359-40.503 3.5747-40.831-0.57654-0.54733-102.17-12.041-102.63-11.603-0.63091 0.59889-3.9309 37.119-4.8431 37.985-10.116 1.532-20.54 1.6695-30.788 2.1893-4.5914-13.559-3.8542-29.363-10.263-42.364-1.6651-0.26349-99.491 20.776-100.21 21.456-0.84474 0.80196 7.9931 40.198 8.4178 43.02-10.082 6.9367-22.27 10.346-33.556 15.216-8.838-8.2339-16.127-23.425-26.407-29.775-1.1531 0.3284-75.299 57.142-79.22 60.754-3.0137 2.3841 18.219 23.165 18.219 25.177-7.6277 8.3072-16.114 15.954-24.331 23.754-8.1746-2.263-24.652-15.635-32.403-15.654-0.9225 0.76627-48.201 83.633-48.201 84.399 7.2777 4.5402 15.171 8.2936 22.832 12.26-3.2652 4.6494-7.7767 20.733-13.261 22.003-4.0711-0.38642-27.84-5.2072-28.482-4.5976-0.57656 0.87574-23.985 97.425-23.639 97.754 0.53036 0.50348 23.319 4.9504 23.87 5.4734 0.46125 0.43786-2.0756 34.92-2.5369 35.467-1.0238 0.48596-28.177 5.1832-28.828 5.8017-0.46125 0.43788 19.488 95.674 20.064 96.55 0.56655 0.53783 23.471-4.0713 24.1-3.1745 1.926 2.7426 0.33075 5.3254 12.108 35.139-6.0801 4.3148-25.806 11.746-24.907 17.953 2.1129 2.7579 52.17 80.395 53.159 81.334 8.0134-2.625 15.372-7.8889 22.601-12.151 5.3678 6.228-2.4816-2.9461 23.87 27.367-10.988 15.646-15.707 20.305-17.066 23.316 13.843 10.96 69.761 50.172 84.105 58.897 5.2315-6.925 12.323-17.389 17.04-24.703 14.657 6.6887 29.127 14.585 39.767 19.437-3.4428 8.1465-4.3848 13.777-7.0621 24.404 14.719 3.2141 81.523 24.457 95.992 26.232 2.8706-8.1084 6.3972-14.415 7.172-21.291 14.029 0.53678 33.146 3.6512 46.549 3.1483 1.8046 9.3812 3.2488 18.292 2.5816 24.362 12.587-1.3434 100.17-7.8518 111.75-9.8363-2.4986-7.7502-6.3742-20.713-8.407-27.258 10.393-2.4263 33.782-10.408 42.796-13.077 4.8721 6.3917 10.664 21.772 15.626 27.297 9.2625-5.5846 53.294-21.771 79.727-37.02-5.3088-6.3511-11.713-19.534-13.678-22.031 15.369-12.465 10.251-7.646 23.858-19.148z" fill="url(#radialGradient4)" stroke-width=".11235"/>
 <ellipse cx="415.04" cy="390.49" rx="308.68" ry="293.27" fill="#ffe986" stroke-opacity="0"/>
 <script id="mesh_polyfill" type="text/javascript">!function(){const t="http://www.w3.org/2000/svg",e="http://www.w3.org/1999/xlink",s="http://www.w3.org/1999/xhtml",r=2;if(document.createElementNS(t,"meshgradient").x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case"translate":2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error("mesh.js: translate does not have 2 arguments!"),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case"scale":1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error("mesh.js: scale does not have 1 or 2 arguments!"),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case"rotate":if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error("math.js: No argument to rotate transform!");3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case"skewX":l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error("math.js: No argument to skewX transform!");break;case"skewY":l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error("math.js: No argument to skewY transform!");break;case"matrix":6===l.length?h=h.append(new g(...l)):console.error("math.js: Incorrect number of arguments for matrix!");break;default:console.error("mesh.js: Unhandled transform type: "+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error("mesh.js: argument to Affine.append is not affine!");let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute("type")||"bilinear"}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute("x")),n=Number(t.getAttribute("y"));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute("path"),c="l";null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case"l":0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case"L":0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case"c":0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case"C":0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error("mesh.js: "+c+" invalid path type.")}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if("bilinear"===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll("rect,circle,ellipse,path,text").forEach((r,n)=&gt;{let o=r.getAttribute("id");o||(o="patchjs_shape"+n,r.setAttribute("id",o));const i=r.style.fill.match(/^url\(\s*"?\s*#([^\s"]+)"?\s*\)/),a=r.style.stroke.match(/^url\(\s*"?\s*#([^\s"]+)"?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;"meshgradient"===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,"canvas");d(l,{width:i.width,height:i.height});const c=l.getContext("2d");let u=c.createImageData(i.width,i.height);const f=new b(a);"objectBoundingBox"===a.getAttribute("gradientUnits")&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute("gradientTransform");null!=p&amp;&amp;f.transform(h(p)),"userSpaceOnUse"===a.getAttribute("gradientUnits")&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,"image");d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,"xlink:href",g),r.parentNode.insertBefore(y,r),r.style.fill="none";const w=document.createElementNS(t,"use");w.setAttributeNS(e,"xlink:href","#"+o);const m="patchjs_clip"+n,M=document.createElementNS(t,"clipPath");M.setAttribute("id",m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute("clip-path","url(#"+m+")"),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;"meshgradient"===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute("stroke-miterlimit"))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,"canvas");d(p,{width:l,height:c});const y=p.getContext("2d");let g=y.createImageData(l,c);const w=new b(o);"objectBoundingBox"===o.getAttribute("gradientUnits")&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute("gradientTransform");null!=m&amp;&amp;w.transform(h(m)),"userSpaceOnUse"===o.getAttribute("gradientUnits")&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,"image");d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,"xlink:href",S);const k="pattern_clip"+n,A=document.createElementNS(t,"pattern");d(A,{id:k,patternUnits:"userSpaceOnUse",width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke="url(#"+k+")",g=null,p=null,S=null}}})}();</script>
 <text transform="matrix(.75 0 0 .75 0 -10.5)" fill="#f9f9f9" font-family="Sans" font-size="42.667px" font-weight="bold" stroke="#ffffff" stroke-linecap="round" stroke-linejoin="round" stroke-width="60.336" style="shape-inside:url(#rect18);white-space:pre" xml:space="preserve"/>
 <g transform="matrix(.75 0 0 .75 -139.62 .31889)" stroke-linecap="round" stroke-linejoin="round" stroke-width="6.6667" style="shape-padding:3.10629;white-space:pre" aria-label="3rd place
Epson Hackathon">
  <path d="m497.45 341.93q2.8711 2.4609 4.5703 5.7422t1.6992 8.7305q0 6.1524-2.4609 11.484-2.4023 5.332-7.4414 9.1406-4.9219 3.6914-11.602 5.6836-6.6211 1.9336-16.113 1.9336-10.84 0-18.633-1.6992-7.7344-1.6992-12.598-3.8086v-19.16h2.2852q5.0391 3.0469 12.012 5.2734 7.0312 2.2266 12.832 2.2266 3.3984 0 7.3828-0.52734 3.9844-0.58594 6.7383-2.4609 2.168-1.4648 3.457-3.5156 1.2891-2.1094 1.2891-6.0352 0-3.8086-1.7578-5.8594-1.7578-2.1094-4.6289-2.9883-2.8711-0.9375-6.9141-0.99609-4.043-0.11719-7.5-0.11719h-4.8047v-15.586h4.9805q4.5703 0 8.0859-0.29297 3.5156-0.29296 5.9766-1.3476 2.5781-1.1133 3.8672-2.9297 1.2891-1.875 1.2891-5.4492 0-2.6367-1.3477-4.2188-1.3477-1.6406-3.3984-2.5781-2.2852-1.0547-5.3906-1.4062-3.1055-0.35157-5.332-0.35157-5.5078 0-11.953 1.9336-6.4453 1.875-12.48 5.4492h-2.168v-18.926q4.8047-1.9336 13.066-3.6914 8.2617-1.8164 16.758-1.8164 8.2617 0 14.473 1.4648 6.2109 1.4062 10.254 3.8086 4.8047 2.8711 7.1484 6.9727 2.3438 4.1016 2.3438 9.6094 0 7.2656-4.5117 13.008-4.5117 5.6836-11.895 7.2656v0.82031q2.9883 0.41016 6.3281 1.6406 3.3398 1.2305 6.0938 3.5742zm72.188-4.8047h-1.875q-1.3477-0.46875-4.3359-0.70313-2.9883-0.23437-4.9805-0.23437-4.5117 0-7.9688 0.58594-3.457 0.58593-7.4414 1.9922v44.062h-21.094v-65.801h21.094v9.668q6.9726-5.9766 12.129-7.9102 5.1562-1.9922 9.4922-1.9922 1.1133 0 2.5195 0.0586t2.4609 0.17578zm75.938 45.703h-21.094v-6.8555q-5.4492 4.4531-10.195 6.5625-4.7461 2.1094-10.957 2.1094-12.012 0-19.219-9.2578-7.207-9.2578-7.207-24.961 0-8.3789 2.4024-14.824 2.4609-6.5039 6.6797-11.133 3.9844-4.3945 9.668-6.7969 5.6836-2.4609 11.367-2.4609 5.918 0 9.668 1.2891 3.8086 1.2305 7.793 3.1641v-28.008h21.094zm-21.094-18.164v-32.285q-2.2266-0.9375-4.6875-1.3476-2.4609-0.41016-4.5117-0.41016-8.3203 0-12.48 5.2148-4.1602 5.1562-4.1602 14.355 0 9.668 3.3398 14.062 3.3398 4.3359 10.723 4.3359 2.8711 0 6.0938-1.0547 3.2227-1.1133 5.6836-2.8711zm150.7-15.645q0 8.1445-2.5195 14.824-2.4609 6.6797-6.5039 11.016-4.2188 4.5703-9.5508 6.9141-5.332 2.3438-11.426 2.3438-5.625 0-9.5508-1.2305-3.9258-1.1719-8.0273-3.3398v27.422h-21.094v-89.941h21.094v6.8555q4.8633-3.8672 9.9023-6.2695 5.0977-2.4023 11.719-2.4023 12.305 0 19.102 9.0234 6.8555 9.0234 6.8555 24.785zm-21.738 0.41016q0-9.6094-3.2812-13.945-3.2812-4.3359-10.371-4.3359-2.9883 0-6.1524 0.9375-3.1641 0.8789-6.0352 2.5781v33.105q2.1094 0.82031 4.5117 1.0547 2.4023 0.23437 4.7461 0.23437 8.3789 0 12.48-4.8633 4.1016-4.9219 4.1016-14.766zm58.066 33.398h-21.094v-91.172h21.094zm59.766-17.168v-13.711q-4.2773 0.35156-9.2578 0.99609-4.9805 0.58594-7.5586 1.4062-3.1641 0.99609-4.8633 2.9297-1.6406 1.875-1.6406 4.9805 0 2.0508 0.35156 3.3398 0.35157 1.2891 1.7578 2.4609 1.3476 1.1719 3.2226 1.7578 1.875 0.52734 5.8594 0.52734 3.1641 0 6.3867-1.2891 3.2812-1.2891 5.7422-3.3984zm0 10.195q-1.6992 1.2891-4.2188 3.1055-2.5195 1.8164-4.7461 2.8711-3.1055 1.4062-6.4453 2.0508-3.3398 0.70313-7.3242 0.70313-9.375 0-15.703-5.8008-6.3281-5.8008-6.3281-14.824 0-7.207 3.2226-11.777 3.2227-4.5703 9.1406-7.207 5.8594-2.6367 14.531-3.75 8.6719-1.1133 17.988-1.6406v-0.35157q0-5.4492-4.4531-7.5-4.4531-2.1094-13.125-2.1094-5.2148 0-11.133 1.875-5.918 1.8164-8.4961 2.8125h-1.9336v-15.879q3.3398-0.8789 10.84-2.0508 7.5586-1.2305 15.117-1.2305 17.988 0 25.957 5.5664 8.0273 5.5078 8.0273 17.344v44.766h-20.918zm74.59 8.7305q-8.6133 0-15.762-2.0508-7.0898-2.0508-12.363-6.3281-5.2148-4.2773-8.0859-10.781t-2.8711-15.234q0-9.1992 3.0469-15.879 3.1055-6.6797 8.6133-11.074 5.332-4.1602 12.305-6.0938t14.473-1.9336q6.7383 0 12.422 1.4648t10.605 3.8086v17.988h-2.9883q-1.2305-1.0547-2.9883-2.4609-1.6992-1.4062-4.2188-2.7539-2.4024-1.2891-5.2734-2.1094-2.8711-0.87891-6.6797-0.87891-8.4375 0-13.008 5.3906-4.5117 5.332-4.5117 14.531 0 9.4922 4.6289 14.414 4.6875 4.9219 13.242 4.9219 3.9844 0 7.1484-0.8789 3.2227-0.9375 5.332-2.168 1.9922-1.1719 3.5156-2.4609t2.8125-2.5195h2.9883v17.988q-4.9805 2.3438-10.43 3.6914-5.3906 1.4062-11.953 1.4062zm101.13-30.762h-48.281q0.46875 7.7344 5.8594 11.836 5.4492 4.1016 15.996 4.1016 6.6797 0 12.949-2.4024 6.2695-2.4023 9.9023-5.1562h2.3438v16.934q-7.1485 2.8711-13.477 4.1602-6.3281 1.2891-14.004 1.2891-19.805 0-30.352-8.9062-10.547-8.9062-10.547-25.371 0-16.289 9.9609-25.781 10.02-9.5508 27.422-9.5508 16.055 0 24.141 8.1445 8.0859 8.0859 8.0859 23.32zm-20.976-12.363q-0.1758-6.6211-3.2813-9.9609-3.1055-3.3398-9.668-3.3398-6.0937 0-10.02 3.1641-3.9258 3.1641-4.3945 10.137z"/>
  <path d="m611.07 532.83h-63.105v-87.246h63.105v16.875h-40.723v15.059h37.793v16.875h-37.793v21.562h40.723zm86.367-33.809q0 8.1445-2.5195 14.824-2.4609 6.6797-6.5039 11.016-4.2188 4.5703-9.5508 6.9141t-11.426 2.3438q-5.625 0-9.5508-1.2305-3.9258-1.1719-8.0274-3.3398v27.422h-21.094v-89.941h21.094v6.8555q4.8633-3.8672 9.9024-6.2695 5.0976-2.4023 11.719-2.4023 12.305 0 19.102 9.0234 6.8555 9.0234 6.8555 24.785zm-21.738 0.41016q0-9.6094-3.2812-13.945-3.2812-4.3359-10.371-4.3359-2.9883 0-6.1523 0.9375-3.1641 0.8789-6.0352 2.5781v33.105q2.1094 0.82031 4.5117 1.0547 2.4023 0.23437 4.7461 0.23437 8.3789 0 12.48-4.8633 4.1016-4.9219 4.1016-14.766zm94.16 12.539q0 10.195-9.1406 16.465-9.1406 6.2109-25.02 6.2109-8.7891 0-15.938-1.6406-7.1484-1.6406-11.484-3.6328v-17.344h1.9336q1.582 1.1133 3.6328 2.4609 2.1094 1.2891 5.918 2.8125 3.2812 1.3477 7.4414 2.3438 4.1602 0.9375 8.9062 0.9375 6.2109 0 9.1992-1.3477 2.9883-1.4062 2.9883-4.1016 0-2.4023-1.7578-3.457-1.7578-1.1133-6.6797-2.1094-2.3438-0.52734-6.3867-1.1133-3.9844-0.64453-7.2656-1.5234-8.9648-2.3438-13.301-7.2656-4.3359-4.9805-4.3359-12.363 0-9.4922 8.9648-15.762 9.0234-6.3281 24.609-6.3281 7.3828 0 14.121 1.5234 6.7969 1.4648 10.605 3.1641v16.641h-1.8164q-4.6875-3.2227-10.723-5.2148-5.9766-2.0508-12.129-2.0508-5.0976 0-8.6133 1.4062-3.457 1.4062-3.457 3.9844 0 2.3438 1.582 3.5742t7.4414 2.4609q3.2226 0.64453 6.9141 1.2891 3.75 0.58594 7.5 1.5234 8.3203 2.168 12.305 6.8555 3.9844 4.6289 3.9844 11.602zm81.27-12.012q0 16.23-9.4922 25.605-9.4336 9.3164-26.543 9.3164-17.109 0-26.602-9.3164-9.4336-9.375-9.4336-25.605 0-16.348 9.4922-25.664 9.5508-9.3164 26.543-9.3164 17.227 0 26.602 9.375 9.4336 9.375 9.4336 25.605zm-25.957 15.996q2.0508-2.5195 3.0469-6.0352 1.0547-3.5742 1.0547-9.8438 0-5.8008-1.0547-9.7266-1.0547-3.9258-2.9297-6.2695-1.875-2.4023-4.5117-3.3984-2.6367-0.9961-5.6836-0.9961-3.0469 0-5.4492 0.82031-2.3438 0.82032-4.5117 3.2812-1.9336 2.2852-3.1055 6.2695-1.1133 3.9844-1.1133 10.02 0 5.3906 0.99609 9.375 0.9961 3.9258 2.9297 6.3281 1.875 2.2852 4.4531 3.3398 2.6367 1.0547 5.9766 1.0547 2.8711 0 5.4492-0.9375 2.6367-0.99609 4.4531-3.2812zm107.17 16.875h-21.211v-32.637q0-3.9844-0.41015-7.9102-0.41016-3.9844-1.4062-5.8594-1.1719-2.168-3.457-3.1641-2.2266-0.99609-6.2695-0.99609-2.8711 0-5.8594 0.9375-2.9297 0.9375-6.3867 2.9883v46.641h-21.094v-65.801h21.094v7.2656q5.625-4.3945 10.781-6.7383 5.2148-2.3438 11.543-2.3438 10.664 0 16.641 6.2109 6.0352 6.2109 6.0352 18.574z"/>
  <path d="m468.68 682.83h-22.5v-38.438h-33.223v38.438h-22.5v-87.246h22.5v31.934h33.223v-31.934h22.5zm60.938-17.168v-13.711q-4.2774 0.35156-9.2578 0.99609-4.9805 0.58594-7.5586 1.4062-3.1641 0.99609-4.8633 2.9297-1.6406 1.875-1.6406 4.9805 0 2.0508 0.35157 3.3398 0.35156 1.2891 1.7578 2.4609 1.3477 1.1719 3.2227 1.7578 1.875 0.52734 5.8594 0.52734 3.1641 0 6.3867-1.2891 3.2812-1.2891 5.7422-3.3984zm0 10.195q-1.6992 1.2891-4.2188 3.1055-2.5195 1.8164-4.7461 2.8711-3.1055 1.4062-6.4453 2.0508-3.3398 0.70313-7.3242 0.70313-9.375 0-15.703-5.8008-6.3281-5.8008-6.3281-14.824 0-7.207 3.2227-11.777 3.2226-4.5703 9.1406-7.207 5.8594-2.6367 14.531-3.75 8.6719-1.1133 17.988-1.6406v-0.35157q0-5.4492-4.4531-7.5-4.4531-2.1094-13.125-2.1094-5.2148 0-11.133 1.875-5.918 1.8164-8.4961 2.8125h-1.9336v-15.879q3.3398-0.8789 10.84-2.0508 7.5586-1.2305 15.117-1.2305 17.988 0 25.957 5.5664 8.0274 5.5078 8.0274 17.344v44.766h-20.918zm74.59 8.7305q-8.6133 0-15.762-2.0508-7.0898-2.0508-12.363-6.3281-5.2148-4.2773-8.0859-10.781-2.8711-6.5039-2.8711-15.234 0-9.1992 3.0469-15.879 3.1055-6.6797 8.6133-11.074 5.332-4.1602 12.305-6.0938 6.9727-1.9336 14.473-1.9336 6.7383 0 12.422 1.4648 5.6836 1.4648 10.605 3.8086v17.988h-2.9883q-1.2305-1.0547-2.9883-2.4609-1.6992-1.4062-4.2188-2.7539-2.4023-1.2891-5.2734-2.1094-2.8711-0.87891-6.6797-0.87891-8.4375 0-13.008 5.3906-4.5117 5.332-4.5117 14.531 0 9.4922 4.6289 14.414 4.6875 4.9219 13.242 4.9219 3.9844 0 7.1484-0.8789 3.2226-0.9375 5.332-2.168 1.9922-1.1719 3.5156-2.4609t2.8125-2.5195h2.9883v17.988q-4.9805 2.3438-10.43 3.6914-5.3906 1.4062-11.953 1.4062zm106.17-1.7578h-24.551l-18.457-28.652-5.7422 6.9727v21.68h-21.094v-91.172h21.094v54.434l22.734-29.062h24.316l-23.672 28.359zm50.508-17.168v-13.711q-4.2774 0.35156-9.2578 0.99609-4.9805 0.58594-7.5586 1.4062-3.1641 0.99609-4.8633 2.9297-1.6406 1.875-1.6406 4.9805 0 2.0508 0.35156 3.3398t1.7578 2.4609q1.3477 1.1719 3.2227 1.7578 1.875 0.52734 5.8594 0.52734 3.1641 0 6.3867-1.2891 3.2812-1.2891 5.7422-3.3984zm0 10.195q-1.6992 1.2891-4.2188 3.1055-2.5195 1.8164-4.7461 2.8711-3.1055 1.4062-6.4453 2.0508-3.3398 0.70313-7.3242 0.70313-9.375 0-15.703-5.8008-6.3281-5.8008-6.3281-14.824 0-7.207 3.2227-11.777t9.1406-7.207q5.8594-2.6367 14.531-3.75 8.6719-1.1133 17.988-1.6406v-0.35157q0-5.4492-4.4531-7.5-4.4531-2.1094-13.125-2.1094-5.2148 0-11.133 1.875-5.918 1.8164-8.4961 2.8125h-1.9336v-15.879q3.3398-0.8789 10.84-2.0508 7.5586-1.2305 15.117-1.2305 17.988 0 25.957 5.5664 8.0274 5.5078 8.0274 17.344v44.766h-20.918zm82.383 6.3867q-3.3984 0.8789-7.207 1.3476-3.8086 0.52735-9.3164 0.52735-12.305 0-18.34-4.9805-5.9766-4.9805-5.9766-17.051v-30.762h-8.6719v-14.297h8.6719v-18.809h21.094v18.809h19.746v14.297h-19.746v23.32q0 3.457 0.0586 6.0352 0.0586 2.5781 0.9375 4.6289 0.82031 2.0508 2.8711 3.2812 2.1094 1.1719 6.0938 1.1719 1.6406 0 4.2774-0.70313 2.6953-0.70312 3.75-1.2891h1.7578zm78.691 0.58593h-21.211v-32.637q0-3.9844-0.41016-7.9102-0.41015-3.9844-1.4062-5.8594-1.1719-2.168-3.457-3.1641-2.2266-0.99609-6.2695-0.99609-2.8711 0-5.8594 0.9375-2.9297 0.9375-6.3867 2.9883v46.641h-21.094v-91.172h21.094v32.637q5.625-4.3945 10.781-6.7383 5.2148-2.3438 11.543-2.3438 10.664 0 16.641 6.2109 6.0352 6.2109 6.0352 18.574zm86.66-32.871q0 16.23-9.4922 25.605-9.4336 9.3164-26.543 9.3164-17.109 0-26.602-9.3164-9.4336-9.375-9.4336-25.605 0-16.348 9.4922-25.664 9.5508-9.3164 26.543-9.3164 17.227 0 26.602 9.375 9.4336 9.375 9.4336 25.605zm-25.957 15.996q2.0508-2.5195 3.0469-6.0352 1.0547-3.5742 1.0547-9.8438 0-5.8008-1.0547-9.7266-1.0547-3.9258-2.9297-6.2695-1.875-2.4023-4.5117-3.3984-2.6367-0.9961-5.6836-0.9961-3.0469 0-5.4492 0.82031-2.3438 0.82032-4.5117 3.2812-1.9336 2.2852-3.1055 6.2695-1.1133 3.9844-1.1133 10.02 0 5.3906 0.99609 9.375 0.9961 3.9258 2.9297 6.3281 1.875 2.2852 4.4531 3.3398 2.6367 1.0547 5.9766 1.0547 2.8711 0 5.4492-0.9375 2.6367-0.99609 4.4531-3.2812zm107.17 16.875h-21.211v-32.637q0-3.9844-0.4101-7.9102-0.4102-3.9844-1.4063-5.8594-1.1719-2.168-3.457-3.1641-2.2266-0.99609-6.2695-0.99609-2.8711 0-5.8594 0.9375-2.9297 0.9375-6.3867 2.9883v46.641h-21.094v-65.801h21.094v7.2656q5.625-4.3945 10.781-6.7383 5.2149-2.3438 11.543-2.3438 10.664 0 16.641 6.2109 6.0352 6.2109 6.0352 18.574z"/>
 </g>
</svg>
