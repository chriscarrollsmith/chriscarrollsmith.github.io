<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   width="821.66pt"
   height="1164.8pt"
   preserveAspectRatio="xMidYMid"
   version="1.0"
   viewBox="0 0 821.66 1164.8"
   id="svg11"
   sodipodi:docname="AECTech-ribbon-optimized.svg"
   inkscape:version="1.3 (0e150ed6c4, 2023-07-21)"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview11"
     pagecolor="#ffffff"
     bordercolor="#000000"
     borderopacity="0.25"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1"
     inkscape:document-units="pt"
     showguides="false"
     inkscape:zoom="0.50030046"
     inkscape:cx="547.67089"
     inkscape:cy="770.53697"
     inkscape:window-width="1920"
     inkscape:window-height="991"
     inkscape:window-x="-9"
     inkscape:window-y="-9"
     inkscape:window-maximized="1"
     inkscape:current-layer="svg11" />
  <defs
     id="defs6">
    <linearGradient
       id="linearGradient32"
       x1="416.7"
       x2="411.39"
       y1="793.95"
       y2="645.69"
       gradientTransform="translate(.08241)"
       gradientUnits="userSpaceOnUse">
      <stop
         stop-color="#e6aa0a"
         offset="0"
         id="stop1" />
      <stop
         stop-color="#e6aa0a"
         stop-opacity="0"
         offset="1"
         id="stop2" />
    </linearGradient>
    <linearGradient
       id="linearGradient34"
       x1="416.7"
       x2="411.39"
       y1="793.95"
       y2="645.69"
       gradientTransform="translate(.08241)"
       gradientUnits="userSpaceOnUse">
      <stop
         stop-color="#000080"
         offset="0"
         id="stop3"
         style="stop-color:#2020d5;stop-opacity:1;" />
      <stop
         stop-color="#003"
         offset="1"
         id="stop4" />
    </linearGradient>
    <radialGradient
       id="radialGradient3"
       cx="411.23999"
       cy="389.67001"
       r="406"
       gradientTransform="matrix(1.0394755,0.00126821,-0.00119025,0.97556817,-15.770072,8.9992781)"
       gradientUnits="userSpaceOnUse"
       fx="411.23999"
       fy="389.67001">
      <stop
         stop-color="#00002b"
         offset="0"
         id="stop5"
         style="stop-color:#00001a;stop-opacity:1;" />
      <stop
         stop-color="#000080"
         offset="1"
         id="stop6"
         style="stop-color:#2020d5;stop-opacity:1;" />
    </radialGradient>
  </defs>
  <path
     d="m225.72 654.76c-81.663 140.51-118.41 199.3-225.64 383.33 40.719 4.0111 111.34 10.708 139.18 13.389 16.155 26.358 93.65 112.69 94.153 113.19 86.271-181.59 164.23-323.78 178.6-352.9 66.83 129.11 98.83 189.73 169.2 348.9 1.1545 2.0781 76.825-92.407 97.089-118.19 30.614-8.9821 97.352-15.751 143.27-24.273-13.245-19.052-216.97-339.06-233.45-374.02"
     fill="url(#linearGradient34)"
     stroke="url(#linearGradient32)"
     stroke-width=".1"
     id="path6" />
  <path
     d="m653.28 678.26c4.9186 2.9502 23.921 20.27 27.746 16.858 3.2103-3.284 59.62-73.89 59.62-74.656 0-0.6568-13.185-10.837-17.427-13.464 2.4655-7.979 8.3988-15.418 12.956-22.55 9.391 2.398 18.19 8.0133 27.861 9.4141 11.961-29.507 25.819-60.613 37.263-90.31-5.6377-6.5823-16.214-7.5971-24.307-10.837 3.087-11.366 5.1736-22.934 7.3379-34.482 10.969-0.22061 21.937-0.43863 32.906-0.6568-3.2272-66.905 0.4196-71.551-2.2931-99.177-8.9789 0.33299-17.961 0.54637-26.944 0.76627-2.2734-11.424-3.8134-22.988-6.306-34.373-0.58007-1.9384 31.868-13.816 31.53-15.106-0.45861-1.8609-41.734-92.281-42.078-92.281-0.38873 0-27.114 10.947-29.008 10.947-7.3033-8.5064-12.588-18.465-18.918-27.695l27.173-25.944c-23.97-22.725-47.811-45.575-71.659-68.417-8.0023 6.6854-14.459 15.297-23.046 21.346-0.67659 0-8.0754-5.4858-19.262-13.793 5.1392-11.19 13.753-21.168 18.001-32.731-1.2612-0.9852-89.889-47.071-90.577-47.071-1.3069 0-15.74 27.116-18.001 29.994-2.1034 2.6776-31.023-8.0295-30.842-9.4142 1.0319-7.2248 4.0129-40.503 3.5543-40.831-0.57325-0.54733-101.58-12.041-102.04-11.603-0.62731 0.59889-3.9084 37.119-4.8155 37.985-10.058 1.532-20.423 1.6695-30.613 2.1893-4.5652-13.559-3.8322-29.363-10.204-42.364-1.6556-0.26349-98.924 20.776-99.635 21.456-0.83992 0.80196 7.9475 40.198 8.3698 43.02-10.025 6.9367-22.143 10.346-33.364 15.216-8.7876-8.2339-16.035-23.425-26.256-29.775-1.1465 0.3284-74.869 57.142-78.768 60.754-2.9965 2.3841 18.115 23.165 18.115 25.177-7.5842 8.3072-16.022 15.954-24.192 23.754-8.128-2.263-24.512-15.635-32.218-15.654-0.91724 0.76627-47.926 83.633-47.926 84.399 7.2362 4.5402 15.085 8.2936 22.702 12.26-3.2465 4.6494-7.7323 20.733-13.185 22.003-4.0479-0.38642-27.681-5.2072-28.32-4.5976-0.57327 0.87574-23.848 97.425-23.504 97.754 0.52733 0.50348 23.186 4.9504 23.733 5.4734 0.45862 0.43786-2.0638 34.92-2.5224 35.467-1.018 0.48596-28.016 5.1832-28.664 5.8017-0.45862 0.43788 19.377 95.674 19.95 96.55 0.56332 0.53783 23.337-4.0713 23.963-3.1745 1.915 2.7426 0.32887 5.3254 12.039 35.139-6.0454 4.3148-25.659 11.746-24.765 17.953 2.1008 2.7579 51.872 80.395 52.856 81.334 7.9677-2.625 15.285-7.8889 22.472-12.151 5.3371 6.228-2.4674-2.9461 23.733 27.367-10.925 15.646-15.617 20.305-16.969 23.316 13.764 10.96 69.363 50.172 83.625 58.897 5.2016-6.925 12.253-17.389 16.942-24.703 14.573 6.6887 28.961 14.585 39.541 19.437-3.4231 8.1465-4.3598 13.777-7.0218 24.404 14.635 3.2141 81.058 24.457 95.444 26.232 2.8542-8.1084 6.3606-14.415 7.1311-21.291 13.949 0.53678 32.957 3.6512 46.283 3.1483 1.7944 9.3812 3.2303 18.292 2.5669 24.362 12.516-1.3434 99.595-7.8518 111.11-9.8363-2.4844-7.7502-6.3378-20.713-8.3591-27.258 10.334-2.4263 33.59-10.408 42.552-13.077 4.8443 6.3917 10.604 21.772 15.537 27.297 9.2097-5.5846 52.99-21.771 79.272-37.02-5.2785-6.3511-11.647-19.534-13.6-22.031 15.281-12.465 10.192-7.646 23.722-19.148z"
     fill="url(#radialGradient3)"
     stroke-width=".11203"
     id="path7"
     style="fill:url(#radialGradient3)" />
  <script
     id="mesh_polyfill"
     type="text/javascript">!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();</script>
  <ellipse
     cx="411.20001"
     cy="395.38"
     rx="311.01999"
     ry="309.85001"
     fill="#d9d9d9"
     stroke-linecap="round"
     stroke-linejoin="round"
     stroke-width="4.972"
     id="ellipse7"
     style="fill:#e7fbfa;fill-opacity:1" />
  <g
     transform="matrix(.75 0 0 .75 13.978 88.529)"
     stroke-linecap="round"
     stroke-linejoin="round"
     stroke-width="6.6667"
     style="white-space:pre"
     aria-label="Best open source hack AECTech Hackathon"
     id="g11">
    <path
       d="m306.79 216.45q0 5.625-2.2917 10.052-2.2396 4.4271-6.1979 7.3438-4.5834 3.4375-10.104 4.8958-5.4688 1.4583-13.906 1.4583h-33.854v-77.552h30.104q9.375 0 13.698 0.62501 4.375 0.625 8.6459 2.7604 4.4271 2.2396 6.5625 6.0417 2.1875 3.75 2.1875 8.5938 0 5.625-2.9688 9.948-2.9688 4.2708-8.3854 6.6667v0.41667q7.6042 1.5104 12.031 6.25 4.4792 4.7396 4.4792 12.5zm-25.625-31.875q0-1.9271-0.98959-3.8542-0.9375-1.9271-3.3854-2.8646-2.1875-0.83333-5.4688-0.88541-3.2292-0.10417-9.1146-0.10417h-1.875v16.406h3.125q4.7396 0 8.0729-0.15625 3.3334-0.15625 5.2604-1.0417 2.7083-1.1979 3.5417-3.0729 0.83334-1.9271 0.83334-4.4271zm4.8958 31.563q0-3.6979-1.4583-5.6771-1.4062-2.0312-4.8438-3.0208-2.3438-0.67708-6.4584-0.72917-4.1146-0.0521-8.5938-0.0521h-4.375v19.323h1.4583q8.4375 0 12.083-0.0521t6.7188-1.3542q3.125-1.3021 4.2708-3.4375 1.1979-2.1875 1.1979-5zm92.188-1.7188h-42.917q0.41667 6.875 5.2084 10.521 4.8438 3.6458 14.219 3.6458 5.9375 0 11.51-2.1354 5.5729-2.1354 8.8021-4.5834h2.0833v15.052q-6.3542 2.5521-11.979 3.6979-5.625 1.1458-12.448 1.1458-17.604 0-26.979-7.9167t-9.375-22.552q0-14.479 8.8542-22.917 8.9063-8.4896 24.375-8.4896 14.271 0 21.458 7.2396 7.1875 7.1875 7.1875 20.729zm-18.646-10.99q-0.15625-5.8854-2.9167-8.8542-2.7604-2.9688-8.5938-2.9688-5.4167 0-8.9063 2.8125-3.4896 2.8125-3.9063 9.0104zm82.709 18.229q0 9.0625-8.125 14.635-8.125 5.5208-22.24 5.5208-7.8125 0-14.167-1.4583t-10.208-3.2292v-15.417h1.7188q1.4062 0.98958 3.2292 2.1875 1.875 1.1458 5.2604 2.5 2.9167 1.1979 6.6146 2.0833 3.6979 0.83334 7.9167 0.83334 5.5208 0 8.1771-1.1979 2.6563-1.25 2.6563-3.6458 0-2.1354-1.5625-3.0729-1.5625-0.98959-5.9375-1.875-2.0833-0.46875-5.6771-0.98958-3.5417-0.57292-6.4584-1.3542-7.9688-2.0833-11.823-6.4584-3.8542-4.4271-3.8542-10.99 0-8.4375 7.9688-14.01 8.0209-5.625 21.875-5.625 6.5625 0 12.552 1.3542 6.0417 1.3021 9.4271 2.8125v14.792h-1.6146q-4.1667-2.8646-9.5313-4.6354-5.3125-1.8229-10.781-1.8229-4.5313 0-7.6563 1.25-3.0729 1.25-3.0729 3.5417 0 2.0833 1.4062 3.1771 1.4063 1.0938 6.6146 2.1875 2.8646 0.57291 6.1458 1.1458 3.3333 0.52084 6.6667 1.3542 7.3958 1.9271 10.938 6.0938 3.5417 4.1146 3.5417 10.313zm49.844 18.021q-3.0208 0.78126-6.4063 1.1979-3.3854 0.46875-8.2813 0.46875-10.938 0-16.302-4.4271-5.3125-4.4271-5.3125-15.156v-27.344h-7.7084v-12.708h7.7084v-16.719h18.75v16.719h17.552v12.708h-17.552v20.729q0 3.0729 0.0521 5.3646 0.0521 2.2917 0.83333 4.1146 0.72917 1.8229 2.5521 2.9167 1.875 1.0417 5.4167 1.0417 1.4583 0 3.8021-0.625 2.3958-0.625 3.3334-1.1458h1.5625zm107.45-28.698q0 14.427-8.4375 22.76-8.3854 8.2813-23.594 8.2813t-23.646-8.2813q-8.3854-8.3334-8.3854-22.76 0-14.531 8.4375-22.813 8.4896-8.2813 23.594-8.2813 15.313 0 23.646 8.3334 8.3854 8.3334 8.3854 22.76zm-23.073 14.219q1.8229-2.2396 2.7083-5.3646 0.93751-3.1771 0.93751-8.75 0-5.1563-0.93751-8.6459-0.9375-3.4896-2.6042-5.5729-1.6667-2.1354-4.0104-3.0208t-5.0521-0.88542-4.8438 0.72917q-2.0833 0.72917-4.0104 2.9167-1.7188 2.0313-2.7604 5.5729-0.98958 3.5417-0.98958 8.9063 0 4.7917 0.88542 8.3334 0.88541 3.4896 2.6042 5.625 1.6667 2.0313 3.9584 2.9688 2.3438 0.9375 5.3125 0.9375 2.5521 0 4.8438-0.83333 2.3438-0.88542 3.9583-2.9167zm97.552-15.052q0 7.2396-2.2396 13.177-2.1875 5.9375-5.7813 9.7917-3.75 4.0625-8.4896 6.1459t-10.156 2.0833q-5 0-8.4896-1.0938-3.4896-1.0417-7.1354-2.9688v24.375h-18.75v-79.948h18.75v6.0938q4.3229-3.4375 8.8021-5.5729 4.5313-2.1354 10.417-2.1354 10.938 0 16.979 8.0208 6.0938 8.0209 6.0938 22.031zm-19.323 0.36459q0-8.5417-2.9167-12.396-2.9167-3.8542-9.2188-3.8542-2.6562 0-5.4688 0.83333-2.8125 0.78125-5.3646 2.2917v29.427q1.875 0.72917 4.0104 0.9375 2.1354 0.20834 4.2188 0.20834 7.4479 0 11.094-4.3229 3.6458-4.375 3.6458-13.125zm90.469 3.9063h-42.917q0.41667 6.875 5.2084 10.521 4.8438 3.6458 14.219 3.6458 5.9375 0 11.51-2.1354 5.5729-2.1354 8.8021-4.5834h2.0833v15.052q-6.3542 2.5521-11.979 3.6979-5.625 1.1458-12.448 1.1458-17.604 0-26.979-7.9167t-9.375-22.552q0-14.479 8.8542-22.917 8.9063-8.4896 24.375-8.4896 14.271 0 21.458 7.2396 7.1875 7.1875 7.1875 20.729zm-18.646-10.99q-0.15625-5.8854-2.9167-8.8542-2.7604-2.9688-8.5938-2.9688-5.4167 0-8.9063 2.8125-3.4896 2.8125-3.9063 9.0104zm90.625 36.771h-18.854v-29.011q0-3.5417-0.36458-7.0313-0.36459-3.5417-1.25-5.2084-1.0417-1.9271-3.0729-2.8125-1.9792-0.88542-5.5729-0.88542-2.5521 0-5.2084 0.83334-2.6042 0.83333-5.6771 2.6563v41.458h-18.75v-58.49h18.75v6.4584q5-3.9063 9.5834-5.9896 4.6354-2.0833 10.26-2.0833 9.4792 0 14.792 5.5208 5.3646 5.5208 5.3646 16.51z"
       id="path8" />
    <path
       d="m229.19 355q0 9.0625-8.125 14.635-8.125 5.5208-22.24 5.5208-7.8125 0-14.167-1.4583-6.3542-1.4583-10.208-3.2292v-15.417h1.7188q1.4063 0.98959 3.2292 2.1875 1.875 1.1458 5.2604 2.5 2.9167 1.1979 6.6146 2.0833 3.6979 0.83334 7.9167 0.83334 5.5208 0 8.1771-1.1979 2.6562-1.25 2.6562-3.6458 0-2.1354-1.5625-3.0729-1.5625-0.98959-5.9375-1.875-2.0833-0.46875-5.6771-0.98958-3.5417-0.57292-6.4584-1.3542-7.9688-2.0833-11.823-6.4584-3.8542-4.4271-3.8542-10.99 0-8.4375 7.9688-14.01 8.0209-5.625 21.875-5.625 6.5625 0 12.552 1.3542 6.0417 1.3021 9.4271 2.8125v14.792h-1.6146q-4.1667-2.8646-9.5313-4.6354-5.3125-1.8229-10.781-1.8229-4.5313 0-7.6563 1.25-3.0729 1.25-3.0729 3.5417 0 2.0833 1.4062 3.1771 1.4063 1.0938 6.6146 2.1875 2.8646 0.57291 6.1458 1.1458 3.3334 0.52084 6.6667 1.3542 7.3959 1.9271 10.938 6.0938 3.5417 4.1146 3.5417 10.313zm72.24-10.677q0 14.427-8.4375 22.76-8.3854 8.2813-23.594 8.2813t-23.646-8.2813q-8.3854-8.3334-8.3854-22.76 0-14.531 8.4375-22.813 8.4896-8.2813 23.594-8.2813 15.313 0 23.646 8.3334 8.3854 8.3334 8.3854 22.76zm-23.073 14.219q1.8229-2.2396 2.7083-5.3646 0.93751-3.1771 0.93751-8.75 0-5.1563-0.93751-8.6459-0.9375-3.4896-2.6042-5.5729-1.6667-2.1354-4.0104-3.0208t-5.0521-0.88542-4.8438 0.72917q-2.0833 0.72917-4.0104 2.9167-1.7188 2.0313-2.7604 5.5729-0.98959 3.5417-0.98959 8.9063 0 4.7917 0.88542 8.3334 0.88542 3.4896 2.6042 5.625 1.6667 2.0313 3.9583 2.9688 2.3438 0.9375 5.3125 0.9375 2.5521 0 4.8438-0.83333 2.3438-0.88542 3.9583-2.9167zm94.792 15h-18.75v-6.4584q-5.2084 3.9583-9.5313 6.0417-4.3229 2.0313-10.313 2.0313-9.6875 0-14.948-5.5729-5.2084-5.5729-5.2084-16.458v-38.073h18.854v29.011q0 4.4271 0.26041 7.3959 0.3125 2.9167 1.3542 4.8438 0.98959 1.9271 2.9688 2.8125 2.0313 0.88542 5.625 0.88542 2.3958 0 5.3125-0.88542 2.9167-0.88542 5.625-2.6042v-41.458h18.75zm60.104-40.625h-1.6667q-1.1979-0.41667-3.8542-0.625-2.6563-0.20833-4.4271-0.20833-4.0104 0-7.0834 0.52083-3.0729 0.52084-6.6146 1.7708v39.167h-18.75v-58.49h18.75v8.5938q6.1979-5.3125 10.781-7.0313 4.5834-1.7708 8.4375-1.7708 0.98958 0 2.2396 0.0521 1.25 0.0521 2.1875 0.15625zm41.094 42.188q-7.6563 0-14.01-1.8229-6.3021-1.8229-10.99-5.625-4.6354-3.8021-7.1875-9.5834t-2.5521-13.542q0-8.1771 2.7083-14.115 2.7604-5.9375 7.6563-9.8438 4.7396-3.6979 10.938-5.4167 6.1979-1.7188 12.865-1.7188 5.9896 0 11.042 1.3021 5.0521 1.3021 9.4271 3.3854v15.99h-2.6563q-1.0938-0.9375-2.6563-2.1875-1.5104-1.25-3.75-2.4479-2.1354-1.1458-4.6875-1.875-2.5521-0.78126-5.9375-0.78126-7.5 0-11.563 4.7917-4.0104 4.7396-4.0104 12.917 0 8.4375 4.1146 12.813 4.1667 4.375 11.771 4.375 3.5417 0 6.3542-0.78126 2.8646-0.83333 4.7396-1.9271 1.7708-1.0417 3.125-2.1875 1.3542-1.1458 2.5-2.2396h2.6563v15.99q-4.4271 2.0833-9.2709 3.2813-4.7917 1.25-10.625 1.25zm89.896-27.344h-42.917q0.41667 6.875 5.2084 10.521 4.8438 3.6458 14.219 3.6458 5.9375 0 11.51-2.1354 5.5729-2.1354 8.8021-4.5834h2.0833v15.052q-6.3542 2.5521-11.979 3.6979-5.625 1.1458-12.448 1.1458-17.604 0-26.979-7.9167t-9.375-22.552q0-14.479 8.8542-22.917 8.9063-8.4896 24.375-8.4896 14.271 0 21.458 7.2396 7.1875 7.1875 7.1875 20.729zm-18.646-10.99q-0.15625-5.8854-2.9167-8.8542-2.7604-2.9688-8.5938-2.9688-5.4167 0-8.9063 2.8125t-3.9063 9.0104zm127.08 36.771h-18.854v-29.011q0-3.5417-0.36459-7.0313-0.36458-3.5417-1.25-5.2084-1.0417-1.9271-3.0729-2.8125-1.9792-0.88542-5.5729-0.88542-2.5521 0-5.2084 0.83334-2.6042 0.83333-5.6771 2.6563v41.458h-18.75v-81.042h18.75v29.011q5-3.9063 9.5834-5.9896 4.6354-2.0833 10.26-2.0833 9.4792 0 14.792 5.5208 5.3646 5.5208 5.3646 16.51zm52.656-15.26v-12.188q-3.8021 0.3125-8.2292 0.88542-4.4271 0.52083-6.7188 1.25-2.8125 0.88542-4.3229 2.6042-1.4583 1.6667-1.4583 4.4271 0 1.8229 0.3125 2.9688 0.3125 1.1458 1.5625 2.1875 1.1979 1.0417 2.8646 1.5625 1.6667 0.46876 5.2084 0.46876 2.8125 0 5.6771-1.1458 2.9167-1.1458 5.1042-3.0208zm0 9.0625q-1.5104 1.1458-3.75 2.7604t-4.2188 2.5521q-2.7604 1.25-5.7292 1.8229-2.9688 0.625-6.5104 0.625-8.3334 0-13.958-5.1563-5.625-5.1563-5.625-13.177 0-6.4063 2.8646-10.469 2.8646-4.0625 8.125-6.4063 5.2084-2.3438 12.917-3.3333 7.7084-0.98959 15.99-1.4583v-0.3125q0-4.8438-3.9584-6.6667-3.9583-1.875-11.667-1.875-4.6354 0-9.8959 1.6667-5.2604 1.6146-7.5521 2.5h-1.7188v-14.115q2.9688-0.78125 9.6354-1.8229 6.7188-1.0938 13.438-1.0938 15.99 0 23.073 4.9479 7.1354 4.8958 7.1354 15.417v39.792h-18.594zm66.302 7.7604q-7.6563 0-14.01-1.8229-6.3021-1.8229-10.99-5.625-4.6354-3.8021-7.1875-9.5834-2.5521-5.7813-2.5521-13.542 0-8.1771 2.7083-14.115 2.7604-5.9375 7.6563-9.8438 4.7396-3.6979 10.938-5.4167 6.1979-1.7188 12.865-1.7188 5.9896 0 11.042 1.3021 5.0521 1.3021 9.4271 3.3854v15.99h-2.6563q-1.0938-0.9375-2.6563-2.1875-1.5104-1.25-3.75-2.4479-2.1354-1.1458-4.6875-1.875-2.5521-0.78126-5.9375-0.78126-7.5 0-11.563 4.7917-4.0104 4.7396-4.0104 12.917 0 8.4375 4.1146 12.813 4.1667 4.375 11.771 4.375 3.5417 0 6.3542-0.78126 2.8646-0.83333 4.7396-1.9271 1.7708-1.0417 3.125-2.1875 1.3542-1.1458 2.5-2.2396h2.6563v15.99q-4.4271 2.0833-9.2709 3.2813-4.7917 1.25-10.625 1.25zm94.375-1.5625h-21.823l-16.406-25.469-5.1042 6.1979v19.271h-18.75v-81.042h18.75v48.386l20.208-25.833h21.615l-21.042 25.208z"
       id="path9" />
    <path
       d="m352.05 506.87h-20.677l-5.3646-15.677h-28.75l-5.3646 15.677h-20.156l28.646-77.552h23.021zm-30.886-29.896-9.5313-27.813-9.5313 27.813zm98.125 29.896h-56.094v-77.552h56.094v15h-36.198v13.385h33.594v15h-33.594v19.167h36.198zm51.823 1.5104q-8.6459 0-15.99-2.5521-7.2917-2.5521-12.552-7.6042t-8.1771-12.604q-2.8646-7.5521-2.8646-17.448 0-9.2188 2.7604-16.719 2.7604-7.5 8.0209-12.865 5.0521-5.1563 12.5-7.9688 7.5-2.8125 16.354-2.8125 4.8958 0 8.8021 0.57292 3.9584 0.52084 7.2917 1.4063 3.4896 0.98958 6.3021 2.2396 2.8646 1.1979 5 2.2396v18.802h-2.2917q-1.4583-1.25-3.6979-2.9688-2.1875-1.7188-5-3.3854-2.8646-1.6667-6.1979-2.8125-3.3334-1.1458-7.1354-1.1458-4.2188 0-8.0209 1.3542-3.8021 1.3021-7.0313 4.375-3.0729 2.9688-5 7.8646-1.875 4.8958-1.875 11.875 0 7.2917 2.0313 12.188 2.0833 4.8958 5.2084 7.7084 3.1771 2.8646 7.0834 4.1146 3.9063 1.1979 7.7084 1.1979 3.6458 0 7.1875-1.0938 3.5938-1.0938 6.6146-2.9688 2.5521-1.5104 4.7396-3.2292 2.1875-1.7188 3.5938-2.9688h2.0833v18.542q-2.9167 1.3021-5.5729 2.4479-2.6562 1.1458-5.5729 1.9792-3.8021 1.0938-7.1354 1.6667-3.3333 0.57292-9.1667 0.57292zm102.81-64.063h-24.219v62.552h-20v-62.552h-24.219v-15h68.438zm68.594 36.771h-42.917q0.41666 6.875 5.2084 10.521 4.8438 3.6458 14.219 3.6458 5.9375 0 11.51-2.1354 5.5729-2.1354 8.8021-4.5834h2.0833v15.052q-6.3542 2.5521-11.979 3.6979-5.625 1.1458-12.448 1.1458-17.604 0-26.979-7.9167t-9.375-22.552q0-14.479 8.8542-22.917 8.9063-8.4896 24.375-8.4896 14.271 0 21.458 7.2396 7.1875 7.1875 7.1875 20.729zm-18.646-10.99q-0.15625-5.8854-2.9167-8.8542-2.7604-2.9688-8.5938-2.9688-5.4167 0-8.9063 2.8125-3.4896 2.8125-3.9063 9.0104zm62.344 38.333q-7.6563 0-14.01-1.8229-6.3021-1.8229-10.99-5.625-4.6354-3.8021-7.1875-9.5834t-2.5521-13.542q0-8.1771 2.7083-14.115 2.7604-5.9375 7.6563-9.8438 4.7396-3.6979 10.938-5.4167 6.1979-1.7188 12.865-1.7188 5.9896 0 11.042 1.3021 5.0521 1.3021 9.4271 3.3854v15.99h-2.6563q-1.0938-0.9375-2.6563-2.1875-1.5104-1.25-3.75-2.4479-2.1354-1.1458-4.6875-1.875-2.5521-0.78126-5.9375-0.78126-7.5 0-11.563 4.7917-4.0104 4.7396-4.0104 12.917 0 8.4375 4.1146 12.813 4.1667 4.375 11.771 4.375 3.5417 0 6.3542-0.78126 2.8646-0.83333 4.7396-1.9271 1.7708-1.0417 3.125-2.1875 1.3542-1.1458 2.5-2.2396h2.6563v15.99q-4.4271 2.0833-9.2709 3.2813-4.7917 1.25-10.625 1.25zm91.042-1.5625h-18.854v-29.011q0-3.5417-0.36459-7.0313-0.36458-3.5417-1.25-5.2084-1.0417-1.9271-3.0729-2.8125-1.9792-0.88542-5.5729-0.88542-2.5521 0-5.2084 0.83334-2.6042 0.83333-5.6771 2.6563v41.458h-18.75v-81.042h18.75v29.011q5-3.9063 9.5834-5.9896 4.6354-2.0833 10.26-2.0833 9.4792 0 14.792 5.5208 5.3646 5.5208 5.3646 16.51z"
       id="path10" />
    <path
       d="m287.52 640.21h-20v-34.167h-29.531v34.167h-20v-77.552h20v28.386h29.531v-28.386h20zm54.167-15.26v-12.188q-3.8021 0.3125-8.2292 0.88542-4.4271 0.52083-6.7188 1.25-2.8125 0.88542-4.3229 2.6042-1.4583 1.6667-1.4583 4.4271 0 1.8229 0.3125 2.9688 0.3125 1.1458 1.5625 2.1875 1.1979 1.0417 2.8646 1.5625 1.6667 0.46876 5.2084 0.46876 2.8125 0 5.6771-1.1458 2.9167-1.1458 5.1042-3.0208zm0 9.0625q-1.5104 1.1458-3.75 2.7604t-4.2188 2.5521q-2.7604 1.25-5.7292 1.8229-2.9688 0.62501-6.5104 0.62501-8.3334 0-13.958-5.1563t-5.625-13.177q0-6.4063 2.8646-10.469 2.8646-4.0625 8.125-6.4063 5.2084-2.3438 12.917-3.3333 7.7084-0.98959 15.99-1.4583v-0.3125q0-4.8438-3.9584-6.6667-3.9583-1.875-11.667-1.875-4.6354 0-9.8959 1.6667-5.2604 1.6146-7.5521 2.5h-1.7188v-14.115q2.9688-0.78125 9.6354-1.8229 6.7188-1.0938 13.438-1.0938 15.99 0 23.073 4.9479 7.1354 4.8958 7.1354 15.417v39.792h-18.594zm66.302 7.7604q-7.6563 0-14.01-1.8229-6.3021-1.8229-10.99-5.625-4.6354-3.8021-7.1875-9.5834t-2.5521-13.542q0-8.1771 2.7083-14.115 2.7604-5.9375 7.6563-9.8438 4.7396-3.6979 10.938-5.4167 6.1979-1.7188 12.865-1.7188 5.9896 0 11.042 1.3021 5.0521 1.3021 9.4271 3.3854v15.99h-2.6563q-1.0938-0.9375-2.6563-2.1875-1.5104-1.25-3.75-2.4479-2.1354-1.1458-4.6875-1.875-2.5521-0.78126-5.9375-0.78126-7.5 0-11.563 4.7917-4.0104 4.7396-4.0104 12.917 0 8.4375 4.1146 12.813 4.1667 4.375 11.771 4.375 3.5417 0 6.3542-0.78126 2.8646-0.83333 4.7396-1.9271 1.7708-1.0417 3.125-2.1875t2.5-2.2396h2.6563v15.99q-4.4271 2.0833-9.2709 3.2813-4.7917 1.25-10.625 1.25zm94.375-1.5625h-21.823l-16.406-25.469-5.1042 6.1979v19.271h-18.75v-81.042h18.75v48.386l20.208-25.833h21.615l-21.042 25.208zm44.896-15.26v-12.188q-3.8021 0.3125-8.2292 0.88542-4.4271 0.52083-6.7188 1.25-2.8125 0.88542-4.3229 2.6042-1.4583 1.6667-1.4583 4.4271 0 1.8229 0.31251 2.9688 0.3125 1.1458 1.5625 2.1875 1.1979 1.0417 2.8646 1.5625 1.6667 0.46876 5.2084 0.46876 2.8125 0 5.6771-1.1458 2.9167-1.1458 5.1042-3.0208zm0 9.0625q-1.5104 1.1458-3.75 2.7604t-4.2188 2.5521q-2.7604 1.25-5.7292 1.8229-2.9688 0.62501-6.5104 0.62501-8.3334 0-13.958-5.1563t-5.625-13.177q0-6.4063 2.8646-10.469 2.8646-4.0625 8.125-6.4063 5.2084-2.3438 12.917-3.3333 7.7084-0.98959 15.99-1.4583v-0.3125q0-4.8438-3.9583-6.6667-3.9584-1.875-11.667-1.875-4.6354 0-9.8959 1.6667-5.2604 1.6146-7.5521 2.5h-1.7188v-14.115q2.9688-0.78125 9.6354-1.8229 6.7188-1.0938 13.438-1.0938 15.99 0 23.073 4.9479 7.1354 4.8958 7.1354 15.417v39.792h-18.594zm73.229 5.6771q-3.0208 0.78125-6.4063 1.1979-3.3854 0.46875-8.2813 0.46875-10.938 0-16.302-4.4271-5.3125-4.4271-5.3125-15.156v-27.344h-7.7084v-12.708h7.7084v-16.719h18.75v16.719h17.552v12.708h-17.552v20.729q0 3.0729 0.0521 5.3646 0.0521 2.2917 0.83333 4.1146 0.72917 1.8229 2.5521 2.9167 1.875 1.0417 5.4167 1.0417 1.4583 0 3.8021-0.625 2.3958-0.625 3.3334-1.1458h1.5625zm69.948 0.52083h-18.854v-29.011q0-3.5417-0.36458-7.0313-0.36459-3.5417-1.25-5.2084-1.0417-1.9271-3.0729-2.8125-1.9792-0.88542-5.5729-0.88542-2.5521 0-5.2084 0.83334-2.6042 0.83334-5.6771 2.6563v41.458h-18.75v-81.042h18.75v29.011q5-3.9063 9.5834-5.9896 4.6354-2.0833 10.26-2.0833 9.4792 0 14.792 5.5208 5.3646 5.5208 5.3646 16.51zm77.032-29.219q0 14.427-8.4375 22.76-8.3854 8.2813-23.594 8.2813-15.208 0-23.646-8.2813-8.3854-8.3334-8.3854-22.76 0-14.531 8.4375-22.813 8.4896-8.2813 23.594-8.2813 15.313 0 23.646 8.3334 8.3854 8.3334 8.3854 22.76zm-23.073 14.219q1.8229-2.2396 2.7083-5.3646 0.9375-3.1771 0.9375-8.75 0-5.1563-0.9375-8.6459-0.9375-3.4896-2.6042-5.5729-1.6667-2.1354-4.0104-3.0208-2.3438-0.88542-5.0521-0.88542-2.7084 0-4.8438 0.72917-2.0833 0.72917-4.0104 2.9167-1.7188 2.0313-2.7604 5.5729-0.98959 3.5417-0.98959 8.9063 0 4.7917 0.88542 8.3334 0.88542 3.4896 2.6042 5.625 1.6667 2.0313 3.9584 2.9688 2.3438 0.93751 5.3125 0.93751 2.5521 0 4.8438-0.83334 2.3438-0.88542 3.9584-2.9167zm95.261 15h-18.854v-29.011q0-3.5417-0.36458-7.0313-0.36459-3.5417-1.25-5.2084-1.0417-1.9271-3.0729-2.8125-1.9792-0.88542-5.5729-0.88542-2.5521 0-5.2084 0.83334-2.6042 0.83334-5.6771 2.6563v41.458h-18.75v-58.49h18.75v6.4584q5-3.9063 9.5834-5.9896 4.6354-2.0833 10.26-2.0833 9.4792 0 14.792 5.5208 5.3646 5.5208 5.3646 16.51z"
       id="path11" />
  </g>
</svg>
